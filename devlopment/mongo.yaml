apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
  namespace: database
data:
  database_url: mongodb
  username: username

---

apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: database
type: Opaque
data: 
  mongo-root-username:  dXNlcm5hbWU=
  mongo-root-password:  cGFzc3dvcmQ=

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: database
  labels:
    app: mongodb
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
    - name: tcp
      protocol: TCP
      port: 27017

---

# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#  name: mongodb
#  namespace: database
# spec:
#  selector:
#    matchLabels:
#      app: mongodb
#  serviceName: mongodb
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: mongodb
#    spec:
#      containers:
#      - name: mongodb
#        image: mongo:4.0
#        startupProbe:
#             exec:
#               command:
#                 - mongo
#                 - --eval
#                 - "db.adminCommand('ping')"
#             initialDelaySeconds: 1
#             periodSeconds: 10
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 2
#        livenessProbe:
#             exec:
#               command:
#                 - mongo
#                 - --eval
#                 - "db.adminCommand('ping')"
#             initialDelaySeconds: 1
#             periodSeconds: 10
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 2
#        readinessProbe:
#             exec:
#               command:
#                 - mongo
#                 - --eval
#                 - "db.adminCommand('ping')"
#             initialDelaySeconds: 1
#             periodSeconds: 10
#             timeoutSeconds: 5
#             successThreshold: 1
#             failureThreshold: 2
#        ports:
#        - containerPort: 27017
#        env:
#          - name: MONGO_INITDB_ROOT_USERNAME
#            valueFrom:
#              secretKeyRef:
#                name: mongodb-secret
#                key: mongo-root-username
#          - name: MONGO_INITDB_ROOT_PASSWORD
#            valueFrom:
#              secretKeyRef:
#                name: mongodb-secret
#                key: mongo-root-password

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: database
spec:
  selector:
    matchLabels:
      app: mongodb
  serviceName: "mongodb"
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.0.8
          startupProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: username
                  name: mongodb-config
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongo-root-password
  #         command:
  #           - mongod
  #           - "--bind_ip_all"
  #           - --config=/etc/mongo/mongodb.conf
  #         volumeMounts:
  #           - name: mongo-volume
  #             mountPath: /data/db
  #           - name: mongodb-config
  #             mountPath: /etc/mongo
  #     volumes:
  #       - name: mongodb-config
  #         configMap:
  #           name: mongodb-config
  #           items:
  #             - key: mongodb.conf
  #               path: mongodb.conf
  # volumeClaimTemplates:
  #   - metadata:
  #       name: mongo-volume
  #     spec:
  #       accessModes: ["ReadWriteOnce"]
  #       storageClassName: demo-storage
  #       resources:
  #         requests:
  #           storage: 1Gi
